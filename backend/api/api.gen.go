// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"github.com/gin-gonic/gin"
)

// BasicInfo defines model for BasicInfo.
type BasicInfo struct {
	Faculty   string `json:"faculty"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Nickname  string `json:"nickname"`

	// SelfIntroduction Markdown形式の自己紹介文
	SelfIntroduction string     `json:"self_introduction"`
	StudentId        string     `json:"student_id"`
	Visibility       Visibility `json:"visibility"`
}

// UpdateResponse defines model for UpdateResponse.
type UpdateResponse struct {
	Message *string `json:"message,omitempty"`
	Status  *string `json:"status,omitempty"`
}

// Visibility defines model for Visibility.
type Visibility struct {
	Instagram        bool `json:"instagram"`
	Name             bool `json:"name"`
	SelfIntroduction bool `json:"self_introduction"`
	X                bool `json:"x"`
}

// PutApiProfileBasicInfoJSONRequestBody defines body for PutApiProfileBasicInfo for application/json ContentType.
type PutApiProfileBasicInfoJSONRequestBody = BasicInfo

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 基本情報を取得する
	// (GET /api/profile/basic-info)
	GetApiProfileBasicInfo(c *gin.Context)
	// 基本情報を更新する
	// (PUT /api/profile/basic-info)
	PutApiProfileBasicInfo(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiProfileBasicInfo operation middleware
func (siw *ServerInterfaceWrapper) GetApiProfileBasicInfo(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiProfileBasicInfo(c)
}

// PutApiProfileBasicInfo operation middleware
func (siw *ServerInterfaceWrapper) PutApiProfileBasicInfo(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiProfileBasicInfo(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/profile/basic-info", wrapper.GetApiProfileBasicInfo)
	router.PUT(options.BaseURL+"/api/profile/basic-info", wrapper.PutApiProfileBasicInfo)
}
